package com.example.style_store_be_adminSP.service.impl;

import com.example.style_store_be_adminSP.entity.SanPhamAdm;
import com.example.style_store_be_adminSP.reposytory.ChiTietSPRepoAdm;
import com.example.style_store_be_adminSP.reposytory.SanPhamRepoAdm;
import com.example.style_store_be_adminSP.service.ICommonServiceAdm;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class SanPhamAdminServiceImplAdm implements ICommonServiceAdm<SanPhamAdm> {

    private static final Logger logger = LoggerFactory.getLogger(SanPhamAdminServiceImplAdm.class);

    @Autowired
    private SanPhamRepoAdm sanPhamAdminRepository;

    @Autowired
    private ChiTietSPRepoAdm sanPhamCtRepository;

    @Override
    public Page<SanPhamAdm> getAll(int page, int size) {
        logger.info("L·∫•y danh s√°ch s·∫£n ph·∫©m ch∆∞a x√≥a, trang: {}, k√≠ch th∆∞·ªõc: {}", page, size);
        Pageable pageable = PageRequest.of(page, size);
        return sanPhamAdminRepository.findAllActiveByOrderByNgayTaoDesc(pageable);
    }

    @Override
    public SanPhamAdm getOne(Long id) {
        logger.info("L·∫•y s·∫£n ph·∫©m v·ªõi ID: {}", id);
        return sanPhamAdminRepository.findById(id)
                .orElseThrow(() -> new SanPhamException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + id));
    }

    @Override
    public SanPhamAdm add(SanPhamAdm object) {
        logger.info("Th√™m s·∫£n ph·∫©m m·ªõi: {}", object.getTen());
        validate(object);
        if (object.getMa() == null || object.getMa().trim().isEmpty()) {
            object.setMa("SP-" + UUID.randomUUID().toString().substring(0, 8));
        }
        Optional<SanPhamAdm> existingByMa = sanPhamAdminRepository.findByMa(object.getMa());
        if (existingByMa.isPresent()) {
            throw new SanPhamException("M√£ s·∫£n ph·∫©m " + object.getMa() + " ƒë√£ t·ªìn t·∫°i");
        }
        object.setTrangThai(1); // M·∫∑c ƒë·ªãnh l√† ƒêang Kinh Doanh
        object.setNgayTao(LocalDateTime.now());
        object.setNgaySua(null);
        object.setNgayXoa(null);
        return sanPhamAdminRepository.save(object);
    }

    @Override
    public SanPhamAdm update(SanPhamAdm object) {
        logger.info("C·∫≠p nh·∫≠t s·∫£n ph·∫©m v·ªõi ID: {}", object.getId());
        if (object.getId() == null) {
            throw new SanPhamException("ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi c·∫≠p nh·∫≠t");
        }

        validate(object);

        SanPhamAdm existing = sanPhamAdminRepository.findById(object.getId())
                .orElseThrow(() -> new SanPhamException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + object.getId()));

        Optional<SanPhamWithQuantity> sanPhamWithQuantity = searchSanPhamWithTotalQuantity(existing.getTen(), 0, 1)
                .getContent().stream().findFirst();
        long totalQuantity = sanPhamWithQuantity.map(SanPhamWithQuantity::getTotalQuantity).orElse(0L);

        if (totalQuantity == 0 && object.getTrangThai() != 0) {
            throw new SanPhamException("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa s·∫£n ph·∫©m h·∫øt h√†ng (s·ªë l∆∞·ª£ng = 0)");
        }

        Optional<SanPhamAdm> existingByMa = sanPhamAdminRepository.findByMa(object.getMa());
        if (existingByMa.isPresent() && !existingByMa.get().getId().equals(object.getId())) {
            throw new SanPhamException("M√£ s·∫£n ph·∫©m " + object.getMa() + " ƒë√£ t·ªìn t·∫°i");
        }

        existing.setTen(object.getTen());
        existing.setMa(object.getMa());

        if (object.getTrangThai() != null) {
            if (object.getTrangThai() == 1) {
                existing.setTrangThai(1);
                existing.setNgayXoa(null); // Kh√¥i ph·ª•c
            } else if (object.getTrangThai() == 2) {
                existing.setTrangThai(2);
                existing.setNgayXoa(LocalDateTime.now()); // T·∫°m ng∆∞ng => x√≥a m·ªÅm
            } else if (object.getTrangThai() == 0) {
                existing.setTrangThai(0); // H·∫øt h√†ng
                // Kh√¥ng g√°n ng√†y xo√°
            } else {
                throw new SanPhamException("Tr·∫°ng th√°i m·ªõi kh√¥ng h·ª£p l·ªá, ch·ªâ ƒë∆∞·ª£c ph√©p l√† 1 (ƒëang kinh doanh), 2 (t·∫°m ng∆∞ng), ho·∫∑c 0 (h·∫øt h√†ng)");
            }
        }

        existing.setNgaySua(LocalDateTime.now());
        return sanPhamAdminRepository.save(existing);
    }

    @Override
    @Transactional
    public void delete(Long id) {
        logger.info("Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m v·ªõi ID: {}", id);
        if (id == null) {
            throw new SanPhamException("ID s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i");
        }

        SanPhamAdm existing = sanPhamAdminRepository.findById(id)
                .orElseThrow(() -> new SanPhamException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + id));

        Optional<SanPhamWithQuantity> sanPhamWithQuantity = searchSanPhamWithTotalQuantity(existing.getTen(), 0, 1)
                .getContent().stream().findFirst();

        long totalQuantity = sanPhamWithQuantity.map(SanPhamWithQuantity::getTotalQuantity).orElse(0L);

        if (totalQuantity == 0) {
            existing.setTrangThai(0); // H·∫øt h√†ng
            existing.setNgaySua(LocalDateTime.now());
            sanPhamAdminRepository.save(existing);
            throw new SanPhamException("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m v√¨ s·ªë l∆∞·ª£ng b·∫±ng 0 (H·∫øt h√†ng)");
        }

        if (existing.getTrangThai() == 1) {
            existing.setTrangThai(2); // T·∫°m ng∆∞ng
            existing.setNgayXoa(LocalDateTime.now());

            // üëâ ƒê·ªìng b·ªô SPCT: chuy·ªÉn t·∫•t c·∫£ sang tr·∫°ng th√°i 2 (ng∆∞ng b√°n)
            sanPhamCtRepository.updateTrangThaiBySanPham(existing.getId(), 2);
        } else if (existing.getTrangThai() == 2) {
            existing.setTrangThai(1); // Kinh doanh l·∫°i
            existing.setNgayXoa(null);

            // üëâ ƒê·ªìng b·ªô SPCT: chuy·ªÉn t·∫•t c·∫£ sang tr·∫°ng th√°i 1 (b√°n l·∫°i)
            sanPhamCtRepository.updateTrangThaiBySanPham(existing.getId(), 1);
        }

        existing.setNgaySua(LocalDateTime.now());
        sanPhamAdminRepository.save(existing);
    }


    public Page<SanPhamAdm> getActive(int page, int size) {
        logger.info("L·∫•y danh s√°ch s·∫£n ph·∫©m ho·∫°t ƒë·ªông, trang: {}, k√≠ch th∆∞·ªõc: {}", page, size);
        Pageable pageable = PageRequest.of(page, size);
        return sanPhamAdminRepository.findByNgayXoaIsNull(pageable);
    }

    public Page<SanPhamAdm> getDeleted(int page, int size) {
        logger.info("L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ x√≥a, trang: {}, k√≠ch th∆∞·ªõc: {}", page, size);
        Pageable pageable = PageRequest.of(page, size);
        return sanPhamAdminRepository.findByNgayXoaIsNotNull(pageable);
    }

    public Page<SanPhamWithQuantity> searchSanPhamWithTotalQuantity(String search, int page, int size) {
        logger.info("T√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: {}, trang: {}, k√≠ch th∆∞·ªõc: {}", search, page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<Object[]> result;
        if (search == null || search.trim().isEmpty()) {
            result = sanPhamAdminRepository.findSanPhamWithTotalQuantityAndOrderByNgayTaoDesc(null, pageable);
        } else {
            result = sanPhamAdminRepository.findSanPhamWithTotalQuantityAndOrderByNgayTaoDesc(search.trim(), pageable);
        }

        List<SanPhamWithQuantity> sanPhamWithQuantities = result.getContent().stream()
                .map(obj -> {
                    SanPhamAdm sanPham = (SanPhamAdm) obj[0];
                    Long totalQuantity = (Long) obj[1];

                    if (totalQuantity == 0 && sanPham.getTrangThai() != 0) {
                        sanPham.setTrangThai(0);
                        sanPhamAdminRepository.save(sanPham);
                    } else if (totalQuantity > 0 && sanPham.getTrangThai() == 0) {
                        sanPham.setTrangThai(1);
                        sanPham.setNgayXoa(null);
                        sanPham.setNgaySua(LocalDateTime.now());
                        sanPhamAdminRepository.save(sanPham);
                    }

                    return new SanPhamWithQuantity(sanPham, totalQuantity != null ? totalQuantity : 0);
                })
                .collect(Collectors.toList());

        return new PageImpl<>(sanPhamWithQuantities, pageable, result.getTotalElements());
    }

    private void validate(SanPhamAdm object) {
        if (object.getTen() == null || object.getTen().trim().isEmpty()) {
            throw new SanPhamException("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        if (!object.getTen().trim().matches("^[\\p{L}\\s]+$")) {
            throw new SanPhamException("T√™n s·∫£n ph·∫©m ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng, kh√¥ng ch·ª©a s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát");
        }
        if (object.getTen().length() > 50) {
            throw new SanPhamException("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±");
        }
        if (object.getTrangThai() != null && (object.getTrangThai() != 0 && object.getTrangThai() != 1 && object.getTrangThai() != 2)) {
            throw new SanPhamException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá, ch·ªâ ƒë∆∞·ª£c ph√©p l√† 0 (h·∫øt h√†ng), 1 (ƒëang kinh doanh) ho·∫∑c 2 (t·∫°m ng∆∞ng)");
        }
        Optional<SanPhamAdm> existing = sanPhamAdminRepository.findByTen(object.getTen().trim());
        if (existing.isPresent() && (object.getId() == null || !existing.get().getId().equals(object.getId()))) {
            throw new SanPhamException("T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i");
        }
    }

    public static class SanPhamException extends RuntimeException {
        public SanPhamException(String message) {
            super(message);
        }
    }

    public static class SanPhamWithQuantity {
        private final SanPhamAdm sanPham;
        private final long totalQuantity;

        public SanPhamWithQuantity(SanPhamAdm sanPham, long totalQuantity) {
            this.sanPham = sanPham;
            this.totalQuantity = totalQuantity;
        }

        public SanPhamAdm getSanPham() {
            return sanPham;
        }

        public long getTotalQuantity() {
            return totalQuantity;
        }
    }
}
